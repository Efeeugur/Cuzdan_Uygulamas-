@model CÃ¼zdan_UygulamasÄ±.BusinessLogic.DTOs.CreateInstallmentDto
@{
    ViewData["Title"] = "Yeni Taksitli AlÄ±ÅŸveriÅŸ";
    var categories = ViewBag.Categories as Microsoft.AspNetCore.Mvc.Rendering.SelectList;
}

<style>
    :root {
        --bg: #f5f5f7;
        --card: #ffffff;
        --text: #1d1d1f;
        --muted: #6e6e73;
        --blue: #007aff;
        --green: #28a745;
        --orange: #ff9500;
        --border: rgba(0, 0, 0, 0.08);
        --shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
        --radius: 16px;
    }

    .form-container {
        max-width: 700px;
        margin: 2rem auto;
        background: var(--card);
        border: 1px solid var(--border);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        overflow: hidden;
    }

    .form-header {
        padding: 2rem 2rem 1rem 2rem;
        text-align: center;
        border-bottom: 1px solid var(--border);
    }

    .form-body {
        padding: 2rem;
    }

    .form-label {
        font-weight: 600;
        font-size: 0.95rem;
        margin-bottom: 0.5rem;
        color: var(--text);
    }

    .form-control,
    .form-select {
        border: 1px solid var(--border);
        border-radius: 12px;
        padding: 12px 16px;
        font-size: 1rem;
        transition: all 0.2s ease;
        background: var(--card);
        color: var(--text);
    }

    .form-control:focus,
    .form-select:focus {
        outline: none;
        border-color: var(--blue);
        box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);
        background: var(--card);
    }

    .btn-apple {
        background: #000;
        color: white;
        border: none;
        border-radius: 12px;
        padding: 12px 24px;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.2s ease;
        width: 100%;
    }

    .btn-apple:hover {
        background: #333;
        color: white;
        transform: translateY(-1px);
    }

    .btn-secondary-custom {
        background: transparent;
        color: var(--muted);
        border: 1px solid var(--border);
        border-radius: 12px;
        padding: 12px 24px;
        font-weight: 600;
        transition: all 0.2s ease;
        text-decoration: none;
    }

    .btn-secondary-custom:hover {
        background: var(--border);
        color: var(--text);
        text-decoration: none;
    }

    .text-danger {
        color: #ff3b30 !important;
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }

    .form-help {
        font-size: 0.9rem;
        color: var(--muted);
        margin-top: 0.25rem;
    }

    .input-group-text {
        background: var(--card);
        border: 1px solid var(--border);
        border-right: none;
        border-radius: 12px 0 0 12px;
        padding: 12px 16px;
        color: var(--muted);
        font-weight: 600;
    }

    .input-group .form-control {
        border-left: none;
        border-radius: 0 12px 12px 0;
    }

    .form-icon {
        color: var(--blue);
        margin-right: 0.5rem;
    }

    .calculation-preview {
        background: rgba(0, 122, 255, 0.05);
        border: 1px solid rgba(0, 122, 255, 0.2);
        border-radius: 12px;
        padding: 1.5rem;
        margin-top: 1rem;
    }

    .preview-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
    }

    .preview-row:not(:last-child) {
        border-bottom: 1px solid rgba(0, 122, 255, 0.1);
    }

    .preview-label {
        font-weight: 600;
        color: var(--muted);
    }

    .preview-value {
        font-weight: 600;
        color: var(--blue);
    }

    .preview-value.total {
        font-size: 1.1rem;
        color: var(--green);
    }

    .installment-info {
        background: #fff3cd;
        border: 1px solid #ffecb5;
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        color: #856404;
    }
</style>

<div class="container-fluid px-4">
    <div class="form-container">
        <div class="form-header">
            <h2 class="mb-2">
                <i class="fas fa-shopping-cart form-icon"></i>
                Yeni Taksitli AlÄ±ÅŸveriÅŸ
            </h2>
            <p class="text-muted mb-0">Taksitli Ã¶demelerinizi takip etmek iÃ§in yeni bir alÄ±ÅŸveriÅŸ ekleyin</p>
        </div>

        <div class="form-body">
            <div class="installment-info">
                <div class="d-flex align-items-center">
                    <i class="fas fa-magic me-2"></i>
                    <div>
                        <strong>ðŸŽ¯ AkÄ±llÄ± Taksit Sistemi</strong>
                        <div class="small">Kategori seÃ§tiÄŸinizde piyasa faiz oranÄ± otomatik olarak belirlenir.
                            Ä°stediÄŸiniz zaman manuel olarak deÄŸiÅŸtirebilirsiniz.</div>
                        <div class="small mt-1">
                            <strong>ðŸ’¡ Ä°pucu:</strong> FarklÄ± kategoriler iÃ§in farklÄ± faiz oranlarÄ± uygulanÄ±r (Ã¶rn:
                            otomobil %0.99, elektronik %1.99).
                        </div>
                    </div>
                </div>
            </div>

            <form asp-action="Create" method="post" novalidate>
                @Html.AntiForgeryToken()
                <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                <div class="row">
                    <div class="col-md-8 mb-4">
                        <label asp-for="Description" class="form-label">
                            <i class="fas fa-edit form-icon"></i>AlÄ±ÅŸveriÅŸ AÃ§Ä±klamasÄ± *
                        </label>
                        <input asp-for="Description" class="form-control"
                            placeholder="Ã¶rn: Laptop, BuzdolabÄ±, Televizyon" />
                        <span asp-validation-for="Description" class="text-danger"></span>
                        <div class="form-help">Neyi taksitle aldÄ±ÄŸÄ±nÄ±zÄ± belirtin</div>
                    </div>
                    <div class="col-md-4 mb-4">
                        <label asp-for="TotalAmount" class="form-label">
                            <i class="fas fa-money-bill-wave form-icon"></i>Toplam Tutar *
                        </label>
                        <div class="input-group">
                            <span class="input-group-text">â‚º</span>
                            <input asp-for="TotalAmount" class="form-control" placeholder="0,00" step="0.01"
                                type="number" onchange="calculateInstallment()" />
                        </div>
                        <span asp-validation-for="TotalAmount" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-4">
                        <label asp-for="TotalInstallments" class="form-label">
                            <i class="fas fa-calendar-alt form-icon"></i>Taksit SayÄ±sÄ± *
                        </label>
                        <select asp-for="TotalInstallments" class="form-select" onchange="calculateInstallment()">
                            <option value="">Taksit sayÄ±sÄ± seÃ§in...</option>
                            <option value="2">2 Taksit</option>
                            <option value="3">3 Taksit</option>
                            <option value="6">6 Taksit</option>
                            <option value="9">9 Taksit</option>
                            <option value="12">12 Taksit</option>
                            <option value="18">18 Taksit</option>
                            <option value="24">24 Taksit</option>
                            <option value="36">36 Taksit</option>
                        </select>
                        <span asp-validation-for="TotalInstallments" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-4">
                        <label asp-for="CategoryId" class="form-label">
                            <i class="fas fa-tags form-icon"></i>Kategori *
                        </label>
                        <select asp-for="CategoryId" asp-items="categories" class="form-select" id="CategoryId"
                            onchange="onCategoryChange()">
                            <option value="">Kategori seÃ§in...</option>
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                        <div class="form-help">Taksit kategorisi (faiz oranÄ±nÄ± belirler)</div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 mb-4">
                        <label asp-for="InterestRate" class="form-label">
                            <i class="fas fa-percentage form-icon"></i>Faiz OranÄ± (AylÄ±k %)
                            <span id="rateSourceIndicator" class="badge bg-info ms-2" style="display: none;">Piyasa OranÄ±</span>
                        </label>
                        <div class="input-group">
                            <input asp-for="InterestRate" class="form-control" type="number" step="0.01" min="0" max="99.99"
                                placeholder="0.00" onchange="onInterestRateChange()" oninput="onInterestRateChange()"
                                id="InterestRateInput" />
                            <span class="input-group-text">%</span>
                        </div>
                        <span asp-validation-for="InterestRate" class="text-danger"></span>

                        <!-- Market Rate Information -->
                        <div id="marketRateInfo" class="form-help" style="display: none;">
                            <i class="fas fa-chart-line me-1"></i>
                            <span id="marketRateText">Kategori iÃ§in Ã¶nerilen piyasa oranÄ±</span>
                        </div>

                        <!-- Rate Comparison -->
                        <div id="rateComparisonInfo" class="mt-1" style="display: none;">
                            <small id="comparisonText" class="text-success"></small>
                        </div>

                        <!-- Manual Override Notice -->
                        <div id="manualOverrideNotice" class="mt-1" style="display: none;">
                            <small class="text-warning">
                                <i class="fas fa-edit me-1"></i>Manuel olarak deÄŸiÅŸtirildi
                            </small>
                        </div>

                        <!-- Smart Rate Controls -->
                        <div class="mt-2" id="rateControlsSection">
                            <div id="marketRateControls" style="display: none;">
                                <small class="text-success d-block mb-1">
                                    <i class="fas fa-check-circle me-1"></i>Piyasa oranÄ± kullanÄ±lÄ±yor
                                </small>
                                <button type="button" class="btn btn-outline-warning btn-sm" onclick="enableManualRate()"
                                    title="Manuel olarak deÄŸiÅŸtir">
                                    <i class="fas fa-edit me-1"></i>Manuel DeÄŸiÅŸtir
                                </button>
                            </div>
                            <div id="manualRateControls" style="display: none;">
                                <small class="text-muted d-block mb-1">HÄ±zlÄ± Ayarlama:</small>
                                <div class="btn-group-sm" role="group">
                                    <button type="button" class="btn btn-outline-success btn-sm me-1"
                                        onclick="setManualRate(0)" title="Faizsiz">%0</button>
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="useMarketRate()"
                                        title="Piyasa oranÄ±na dÃ¶n" id="backToMarketBtn">
                                        <i class="fas fa-undo me-1"></i>Piyasa OranÄ±
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

        <div class="mb-4">
            <label asp-for="FirstPaymentDate" class="form-label">
                <i class="fas fa-calendar form-icon"></i>Ä°lk Ã–deme Tarihi *
            </label>
            <input asp-for="FirstPaymentDate" class="form-control" type="date" />
            <span asp-validation-for="FirstPaymentDate" class="text-danger"></span>
            <div class="form-help">Ä°lk taksit Ã¶demesinin yapÄ±lacaÄŸÄ± tarih</div>
        </div>

        <!-- Calculation Preview -->
        <div class="calculation-preview" id="calculationPreview" style="display: none;">
            <h6 class="mb-3">ðŸ“Š Ã–deme PlanÄ± Ã–nizlemesi</h6>

            <div class="preview-row">
                <span class="preview-label">Ana Para:</span>
                <span class="preview-value" id="previewPrincipal">â‚º0,00</span>
            </div>

            <div class="preview-row">
                <span class="preview-label">Faiz OranÄ±:</span>
                <span class="preview-value" id="previewRate">%0,00</span>
            </div>

            <div class="preview-row">
                <span class="preview-label">Taksit SayÄ±sÄ±:</span>
                <span class="preview-value" id="previewCount">-</span>
            </div>

            <div class="preview-row">
                <span class="preview-label">AylÄ±k Ã–deme:</span>
                <span class="preview-value total" id="previewMonthly">â‚º0,00</span>
            </div>

            <div class="preview-row" id="interestRow" style="display: none;">
                <span class="preview-label">Toplam Faiz:</span>
                <span class="preview-value" id="previewInterest" style="color: var(--orange);">â‚º0,00</span>
            </div>

            <div class="preview-row" id="totalCostRow" style="display: none;">
                <span class="preview-label">Toplam Ã–denecek:</span>
                <span class="preview-value" id="previewTotalCost"
                    style="color: var(--orange); font-weight: 700;">â‚º0,00</span>
            </div>

            <div class="preview-row">
                <span class="preview-label">Son Ã–deme Tarihi:</span>
                <span class="preview-value" id="previewEndDate">-</span>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-md-6 mb-2">
                <a asp-action="Index" class="btn-secondary-action w-100">
                    <i class="fas fa-arrow-left me-2"></i>Ä°ptal Et
                </a>
            </div>
            <div class="col-md-6">
                <button type="submit" class="btn-primary-action w-100">
                    <i class="fas fa-save me-2"></i>Taksitli AlÄ±ÅŸveriÅŸ OluÅŸtur
                </button>
            </div>
        </div>
        </form>
    </div>
</div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Set default first payment date to next month
            const nextMonth = new Date();
            nextMonth.setMonth(nextMonth.getMonth() + 1);
            nextMonth.setDate(1);
            document.querySelector('input[name="FirstPaymentDate"]').value = nextMonth.toISOString().split('T')[0];

            // Initialize rate manager
            rateManager.reset();

            // Focus on description
            document.querySelector('input[name="Description"]').focus();
        });

        // Smart Interest Rate System
        class InterestRateManager {
            constructor() {
                this.currentMarketRate = null;
                this.isUsingMarketRate = false;
                this.currentCategoryData = null;
            }

            setRate(rate, isMarketRate = false, categoryData = null) {
                document.getElementById('InterestRateInput').value = rate.toFixed(2);
                this.isUsingMarketRate = isMarketRate;
                this.currentCategoryData = categoryData;

                this.updateUI();
                calculateInstallment();
            }

            updateUI() {
                const marketControls = document.getElementById('marketRateControls');
                const manualControls = document.getElementById('manualRateControls');
                const rateIndicator = document.getElementById('rateSourceIndicator');
                const marketRateInfo = document.getElementById('marketRateInfo');

                if (this.isUsingMarketRate) {
                    marketControls.style.display = 'block';
                    manualControls.style.display = 'none';
                    rateIndicator.style.display = 'inline';

                    if (this.currentCategoryData) {
                        marketRateInfo.style.display = 'block';
                        document.getElementById('marketRateText').innerHTML = `
                                <strong>${this.currentCategoryData.categoryName}</strong> iÃ§in piyasa oranÄ±: <strong>%${this.currentCategoryData.rate}</strong>
                                <br><small class="text-muted">${this.currentCategoryData.explanation}</small>
                            `;
                    }
                } else {
                    marketControls.style.display = 'none';
                    manualControls.style.display = 'block';
                    rateIndicator.style.display = 'none';
                    marketRateInfo.style.display = 'none';
                }

                // Hide other indicators
                document.getElementById('rateComparisonInfo').style.display = 'none';
                document.getElementById('manualOverrideNotice').style.display = 'none';
            }

            reset() {
                this.currentMarketRate = null;
                this.isUsingMarketRate = false;
                this.currentCategoryData = null;
                document.getElementById('marketRateControls').style.display = 'none';
                document.getElementById('manualRateControls').style.display = 'none';
                document.getElementById('marketRateInfo').style.display = 'none';
                document.getElementById('rateSourceIndicator').style.display = 'none';
            }
        }

        // Initialize the manager
        const rateManager = new InterestRateManager();

        async function onCategoryChange() {
            const categoryId = parseInt(document.getElementById('CategoryId').value);

            // Reset rate manager
            rateManager.reset();

            if (!categoryId) {
                // No category selected - show default rate
                rateManager.setRate(0, false);
                return;
            }

            try {
                // Show loading
                const rateIndicator = document.getElementById('rateSourceIndicator');
                rateIndicator.textContent = 'YÃ¼kleniyor...';
                rateIndicator.className = 'badge bg-secondary ms-2';
                rateIndicator.style.display = 'inline';

                // Fetch market rate
                const response = await fetch(`/api/InterestRateApi/category/${categoryId}`);
                const result = await response.json();

                if (result.success && result.data.isInstallmentCategory) {
                    rateManager.currentMarketRate = result.data.rate;
                    rateManager.setRate(result.data.rate, true, result.data);

                    // Reset loading indicator
                    rateIndicator.textContent = 'Piyasa OranÄ±';
                    rateIndicator.className = 'badge bg-info ms-2';
                } else {
                    throw new Error(result.error || 'Invalid category');
                }
            } catch (error) {
                console.error('Error fetching rate:', error);
                rateManager.setRate(1.99, false); // Fallback
                rateManager.reset(); // Hide indicators
            }
        }

        // Simplified UI Control Functions
        function enableManualRate() {
            rateManager.isUsingMarketRate = false;
            rateManager.updateUI();
        }

        function useMarketRate() {
            if (rateManager.currentMarketRate !== null) {
                rateManager.setRate(rateManager.currentMarketRate, true, rateManager.currentCategoryData);
            }
        }

        function setManualRate(rate) {
            rateManager.setRate(rate, false);
        }

        function onInterestRateChange() {
            // If user manually types a rate, switch to manual mode
            if (rateManager.isUsingMarketRate) {
                enableManualRate();
            }
            calculateInstallment();
        }

        function calculateInstallment() {
            const totalAmount = parseFloat(document.querySelector('input[name="TotalAmount"]').value) || 0;
            const installmentCount = parseInt(document.querySelector('select[name="TotalInstallments"]').value) || 0;
            const interestRate = parseFloat(document.querySelector('input[name="InterestRate"]').value) || 0;
            const firstPaymentDate = document.querySelector('input[name="FirstPaymentDate"]').value;

            const previewDiv = document.getElementById('calculationPreview');
            const interestRow = document.getElementById('interestRow');
            const totalCostRow = document.getElementById('totalCostRow');

            if (totalAmount > 0 && installmentCount > 0) {
                let monthlyPayment, totalInterest, totalCost;

                if (interestRate === 0) {
                    // Simple installment without interest
                    monthlyPayment = totalAmount / installmentCount;
                    totalInterest = 0;
                    totalCost = totalAmount;
                    interestRow.style.display = 'none';
                    totalCostRow.style.display = 'none';
                } else {
                    // Compound interest calculation - same formula as backend
                    const monthlyRate = interestRate / 100;
                    const denominator = Math.pow(1 + monthlyRate, installmentCount) - 1;

                    if (denominator === 0) {
                        monthlyPayment = totalAmount / installmentCount;
                    } else {
                        monthlyPayment = totalAmount * (monthlyRate * Math.pow(1 + monthlyRate, installmentCount)) / denominator;
                    }

                    totalCost = monthlyPayment * installmentCount;
                    totalInterest = totalCost - totalAmount;

                    interestRow.style.display = 'flex';
                    totalCostRow.style.display = 'flex';
                }

                // Calculate last payment date
                let lastPaymentDate = '';
                if (firstPaymentDate) {
                    const firstDate = new Date(firstPaymentDate);
                    const lastDate = new Date(firstDate);
                    lastDate.setMonth(lastDate.getMonth() + installmentCount - 1);
                    lastPaymentDate = lastDate.toLocaleDateString('tr-TR', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                }

                // Update preview with proper Turkish number formatting
                document.getElementById('previewPrincipal').textContent = 'â‚º' + totalAmount.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                document.getElementById('previewRate').textContent = '%' + interestRate.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' (aylÄ±k)';
                document.getElementById('previewCount').textContent = installmentCount + ' ay';
                document.getElementById('previewMonthly').textContent = 'â‚º' + monthlyPayment.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

                if (interestRate > 0) {
                    document.getElementById('previewInterest').textContent = 'â‚º' + totalInterest.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    document.getElementById('previewTotalCost').textContent = 'â‚º' + totalCost.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }

                document.getElementById('previewEndDate').textContent = lastPaymentDate || 'HesaplanÄ±yor...';

                previewDiv.style.display = 'block';
            } else {
                previewDiv.style.display = 'none';
            }
        }
    </script>
}